названия:
  - [веб-сервисы]

авторы:
  - Леверьев В.С., ст. преп. каф ИТ ИМИ, vs.leverev@s-vfu.ru

год: 2024

цель: >-
  получение студентами знаний, умений и навыков работы по разработке веб-сервисов и веб-приложений на базе микросервисной архитектуры.

содержание: >-
  Введение Разбиение монолита на микросервисы. Организация разработки под MSA. Интеграция микросервисов. Организация работы с данными. Типовые приёмы MSA. Развёртывание микросервисов. Стратегии миграции от монолита к MSA.

знать:
  - механизмы работы сетевых протоколов HTTP, TLS, DNS, WebSockets и форматов передачи данных XML, JSON, Protobuf;
  - принципы организации SOA, HTTP API, REST API, GraphQL API и GRPC;
  - инструменты для диагности, тестирования и отладки работы веб-сервисов.

уметь:
  - создавать клиентов для REST API, GraphQL API
  - создавать REST API с помощью библиотек на двух и более языках программирования
  - Производить настройки параметров программного продукта и осуществлять запуск процедур сборки.
  - Разворачивать программное обеспечение, проводить миграцию и преобразование данных, создавать программные интерфейсы.
  - Создавать резервные копии программ и данных, выполнять восстановление, обеспечивать целостность программного продукта и данных.

владеть:
  - ""

связи:
  - [веб, программирование]
  - [интернет]

темы:
  - тема: Введение.
    содержание: >-
      Понятие сервисно-ориентированной архитектуры (SOA). Понятие микросервисной архитектуры (MSA). Сравнение, преимущества и недостатки. Основные характеристики микросервисов.

  - тема: Разбиение монолита на микросервисы.
    содержание: >-
      Подход MonolithFirst. Разбиение по бизнес-возможностям. Разбиение по техническим и организационным аспектам. Разбиение по проблемным областям. Признаки неправильного разбиения. Антипаттерн "распределенный монолит". Оптимальный размер микросервиса.

  - тема: Организация разработки под MSA.
    содержание: >-
      Распределение ролей в командах разработки. Сочетание MSA со Scrum. Инструментарий (Swagger). Организация репозитория кода. Версионирование контрактов.

  - тема: Интеграция микросервисов.
    содержание: >-
      Процесс проектирования информационных систем и закон Конвея. CAP теорема. Паттерны взаимодействия. Синхронные и асинхронные механизмы взаимодействия; Отложенная согласованность данных. Оркестрация и хореография микросервисов. Основные протоколы и технологии (REST, gRPC, GraphQL, Kafka, RabbitMQ и др.). Взаимодействие с внешними системами (API Gateway, BFF). Реактивные системы. Архитектуры, управляемые событиями (EventSourcing). Разделение команды и запроса (CQRS подход).

  - тема: Организация работы с данными.
    содержание: >-
      Антипаттерн Shared database. Паттерн Database per service. Порождение событий. Справочные данные в MSA. Единый источник истины (Source of Truth) в MSA.
  
  - тема: Типовые приёмы MSA.
    содержание: >-
      Модифицируемость. Решение проблемы высокой связанности. Версионирование интерфейсов и событий. Типы контрактов. Изменения событийной модели. Паттерны организации запросов. Микросервисное шасси (Microservicechassis). Сетки сервисов (ServiceMesh).
      Масштабируемость. Паттерны построения балансировщиков. Сервисы обнаружения и паттерны работы с ними.
      Производительность. Паттерны производительности в MSA (переборка, изящная деградация и пр.).
      Согласованность. Проблемы обеспечения согласованности в MSA. CAP теорема. Решения проблем согласованности. Двухфазные коммиты. Паттерн SAGA. Понижение уровня согласованности.
      Надежность. Механизмы отказоустойчивости. Паттерны предохранитель (Circuit Breaker), дросселировка, зависимые таймауты и пр.
      Безопасность. Механизмы обеспечения безопасности в MSA. Аутентификация. Авторизация. Защита периметра. Защита каналов связи. Основные протоколы и паттерны (OAUTH2, JWT, привратник, ключ камердинера и пр.). Популярные серверы аутентификации OAuth 2.0. Аутентификация между микросервисами.
      Тестируемость. Особенности тестирования микросервисов. Пирамида и квадрат тестирования. Модульное тестирование. Интеграционное тестирование. Компонентное тестирование. Тестирование E2E. Паттерны тестирования MSA.
      Удобство обслуживания. Возможность наблюдения (Observability). Паттерны наблюдения (распределенная трассировка, агрегация журналов). Мониторинг и журналирование. Конфигурирование микросервисов. Вынесение конфигурации во вне. Поддержка системы.

  - тема: Развёртывание микросервисов.
    содержание: >-
      Паттерн «Deploymentpipeline». Паттерны развертывания. Организация типового конвейера непрерывной интеграции и развёртывания кода CI/CD. Использование технологий Docker и Kubernetes. Использование сетки ISTIO. Бессерверное развёртывание. Обнаружение сервисов. Стратегии развёртывания (сине-зеленые, канареечные и т.д.).

  - тема: Стратегии миграции от монолита к MSA.
    содержание:
      Стратегии перехода с монолита на микросервисы. Удушение монолита (Strangler application pattern). Выделение ограниченных контекстов. Разделение (миграция) базы данных. Выделение модуля. Выделение сервиса. Взаимодействие между сервисом и монолитом.

контроль:
  - подзаголовок: Примеры контрольных вопросов по теме 1. Введение. Удаленное управление серверами.
    содержание: |-
      1.Какие из следующих утверждений являются преимуществами приложений на микросервисной архитектуре:
          a. Простота проектирования и разработки
          b. Простота развёртывания
          c. Постоянная согласованность всех данных
          d. Хорошая масштабируемость
      2.Какие из следующих утверждений являются недостатками приложений микросервисной архитектуры?
          a. Сложность поддержки и дальнейшей доработки
          b. Использование нескольких языков программирования
          c. Непостоянная согласованность данных
          d. Сложности при масштабировании
      3.Что такое непрерывная интеграция (Continuous Integration)?
          a. Автоматическая сборка и тестирование продукта при фиксации изменений в репозитории
          b. Автоматическое установка сборки продукта на серверах после сборки и тестирования
          c. Автоматизированная проверка кода статическими анализаторами при фиксации изменений в репозитории
          d. Автоматизированная проверка на наличие уязвимостей информационной безопасности при фиксации изменений в репозитории
      4.Что такое непрерывная развёртывание (Continuous Delivery)?
          a. Автоматическая сборка и тестирование продукта при фиксации изменений в репозитории
          b. Автоматическое установка сборки продукта на серверах после сборки и тестирования
          c. Автоматизированная проверка кода статическими анализаторами при фиксации изменений в репозитории
          d. Автоматизированная проверка на наличие уязвимостей информационной безопасности при фиксации изменений в репозитории
      5.Назовите причины использования сине-зелёного развёртывания:
          a. Можно проверить новые возможности системы на небольшой выборке пользователей
          b. Можно мгновенно переключаться между старой и новой версиями системы
          c. Можно быстро восстановить данные из резервной копии
          d. Можно не использовать маршрутизатор и упростить схему развёртывания
      6.Назовите причины использования канареечного развёртывания:
          a. Можно проверить новые возможности системы на небольшой выборке пользователей
          b. Можно мгновенно переключаться между старой и новой версиями системы
          c. Можно быстро восстановить данные из резервной копии
          d. Можно не использовать маршрутизатор и упростить схему развёртывания
      7.Назовите преимущества GraphQL перед стандартным RESTful API:
          a. Более простая реализация на сервере
          b. Более простой язык запросов
          c. Более гибкий язык запросов
          d. Высокая скорость обработки данных

основная литература:
  ссылки:
    - гост: "Моргунов, А. В. Управление Веб-технологиями, сервисами и контентом : учебное пособие / А. В. Моргунов. — Новосибирск : Сибирский государственный университет телекоммуникаций и информатики, 2021. — 88 c. — Текст : электронный // Цифровой образовательный ресурс IPR SMART : [сайт]. — URL: https://www.iprbookshop.ru/125280.html (дата обращения: 15.11.2024). — Режим доступа: для авторизир. пользователей"
      эбс: ЭБС «IPR SMART» https://www.iprbookshop.ru/125280.html

    - гост: "Давыдовский, М. А. Разработка веб-сервисов : учебное пособие / М. А. Давыдовский. — Москва : Российский университет транспорта (МИИТ), 2020. — 112 c. — Текст : электронный // Цифровой образовательный ресурс IPR SMART : [сайт]. — URL: https://www.iprbookshop.ru/115881.html (дата обращения: 15.11.2024). — Режим доступа: для авторизир. пользователей"
      эбс: ЭБС «IPR SMART» https://www.iprbookshop.ru/125280.html

дополнительная литература:
  ссылки:
    - гост: "Ричардсон, К. Микросервисы : паттерны разработки и рефакторинга / К. Ричардсон. — Санкт-Петербург, Москва, Минск: Питер, 2024. — 544 с."
      гриф: —
      экз: —
      эбс: —

интернет-сайты:
  - Обзор дистрибутивов Linux https://www.distrowatch.com/

программное обеспечение:
  - Бесплатное ПО для виртуализации Oracle VirtualBox

информационные системы:
  - Электронно-библиотечная система IPR Books (https://www.iprbooks.ru/)
